@page "/delivery/"
@inject IDeliveryService DeliveryService;

<MDataTable Headers="_header" Items="Deliveries" Class="elevation-1">
    <TopContent>
        <MToolbar Flat>
            <MToolbarTitle>派送员列表</MToolbarTitle>
            <MDivider Class="mx-4" Inset Vertical></MDivider>
            <MButton Color="primary" Dark Class="mb-2" OnClick="GetDataAsync">
                    刷新
            </MButton>
            <MSpacer></MSpacer>
            <MButton Color="primary" Dark Class="mb-2" OnClick="() => _dialog = true">新建</MButton>
        </MToolbar>
        <DeliveryDialog dialog="_dialog" Close="Close" Save="Save" Delivery="delivery"></DeliveryDialog>
        <DeleteDialog CloseDelete="CloseDelete" DeleteItemConfirm="DeleteItemConfirm" _dialogDelete="_dialogDelete"></DeleteDialog>
        <Message MessageStr="@message" _snackbar="snackbar" /> 
    </TopContent>
    <ItemColContent>
        @if (context.Header.Value == "actions")
        {
            <MIcon Small
               Class="mr-2"
               OnClick="()=>EditItem(context.Item)">mdi-pencil</MIcon>
            <MIcon Small
            OnClick="()=>DeleteItem(context.Item)">mdi-delete</MIcon>
        }
        else if(context.Header.Value == nameof(Delivery.State))
        {
            @UtilityChart.DeliveryEnmuToString((int)context.Value);
        }
        else
        {
            @context.Value
        }
    </ItemColContent>
    <NoDataContent>
        <MButton Color="primary"
                 OnClick="GetDataAsync">
            Reset
        </MButton>
    </NoDataContent>
</MDataTable>


@code {
    private List<Delivery> Deliveries { get; set; } = new List<Delivery>();

    private Delivery delivery = new Delivery();

    private bool _dialog;
    private bool _dialogDelete;
    private bool snackbar;
    private string message = string.Empty;

    protected async override Task OnInitializedAsync() {
        var result = await DeliveryService.GetAllAsync();
        if(result != null) {
            Deliveries = result;
        }
    }

    private async Task GetDataAsync() {
        var result = await DeliveryService.GetAllAsync();
        if(result != null) {
            Deliveries = result;
        }
    }

    private void Close() {
        delivery = new Delivery();
        _dialog = false;
    }

    private async Task Save() {
        UpdateSnackbarState();
        Delivery result;
        if(delivery.Id == 0) {
            result = await  DeliveryService.AddAsync(delivery);
        }
        else {
            result = await DeliveryService.UpdateAsync(delivery);
        }
        if(result != null) {
            message = "派送员的信息保存成功！";

        }
        else {
            message = "派送员的信息保存失败！";
            snackbar = true;
            return;
        }
        snackbar = true;
        await GetDataAsync();
        Close();
    }

    private void EditItem(Delivery delivery) {
        this.delivery = delivery;
        _dialog = true;
    }

    private void DeleteItem(Delivery delivery) {
        this.delivery = delivery;
        _dialogDelete = true;
    }

    private void CloseDelete() {
        this.delivery = new Delivery();
        _dialogDelete = false;
    }

    private async Task DeleteItemConfirm() {
        UpdateSnackbarState();
        var result = DeliveryService.DeleteAsync(delivery.Id);
        if(result != null) {
            message = "派送员信息删除成功！";
        }
        else {
            message = "派送员信息删除失败！";
        }
        snackbar = true;
        await GetDataAsync();
        CloseDelete();
    }

    private List<DataTableHeader<Delivery>> _header = new List<DataTableHeader<Delivery>>
    {
        new() {
            Text="ID",
            Sortable=true,
            Value=nameof(Delivery.Id)
        },
        new() {
            Text="姓名",
            Value=nameof(Delivery.Name)
        },
        new() {
          Text="地址",
          Value=nameof(Delivery.Address)
        },
        new() {
          Text="电话号码",
          Value=nameof(Delivery.Phone)
        },
        new() {
            Text="状态",
            Value=nameof(Delivery.State)
        },
        new (){ Text= "操作", Value= "actions",Sortable=false }
    };

    private void UpdateSnackbarState()
    {
        if(snackbar == true)
        {
            snackbar = false;
        }
    }
}
