@page "/user/"
@inject IUserService UserService;

<PageTitle>用户列表</PageTitle>
<MDataTable Headers="_header" Items="Users" Class="elevation-1">
    <TopContent>
        <MToolbar Flat>
            <MToolbarTitle>用户列表</MToolbarTitle>
            <MDivider Class="mx-4" Inset Vertical></MDivider>
            <MButton Color="primary" Dark Class="mb-2" OnClick="GetData">
                    刷新
            </MButton>
            <MSpacer></MSpacer>
            <MButton Color="primary" Dark Class="mb-2" OnClick="() => _dialog = true">新建</MButton>
        </MToolbar>
        <UserDialog user="user" dialog="_dialog" Close="Close" Save="Save"></UserDialog>
        <DeleteDialog CloseDelete="CloseDelete" DeleteItemConfirm="DeleteItemConfirm" _dialogDelete="_dialogDelete"></DeleteDialog>
        <Message MessageStr="@message" _snackbar="snackbar" />
    </TopContent>
    <ItemColContent>
        @if (context.Header.Value == "actions")
        {
            <MIcon Small
               Class="mr-2"
               OnClick="()=>EditItem(context.Item)">mdi-pencil</MIcon>
            <MIcon Small
               OnClick="()=>DeleteItem(context.Item)">mdi-delete</MIcon>
        }
        else
        {
            @context.Value
        }
    </ItemColContent>
    <NoDataContent>
        <MButton Color="primary"
                 OnClick="GetData">
            Reset
        </MButton>
    </NoDataContent>
</MDataTable>

@code {
    private List<User> Users { get; set; } = new List<User>();
    private User user = new User();

    private bool  _dialog;
    private bool  _dialogDelete;
    private bool snackbar;
    private string message = string.Empty;

    private async void OnClick() {
        await GetData();
    }

    protected override async Task OnInitializedAsync() {
        await GetData();
    }

    private async Task GetData() {
        var result = await UserService.GetAllAsync();
        if(result != null) {
            Users = result;
        }
    }
    private void Close() {
        user = new User();
        _dialog = false;
    }

    private async Task Save() {
        UpdateSnackbarState();
        User result;
        if(user.Id == 0) {
            result = await  UserService.AddAsync(user);
        }
        else {
            result = await UserService.UpdateAsync(user);
        }
        if(result != null) {
            message = "用户信息保存成功！";
        }
        else {
            message = "用户信息保存失败！";
        }
        snackbar = true;
        await GetData();
        Close();
    }
    private void EditItem(User item) {
        user = item;
        _dialog = true;
    }

    private void DeleteItem(User item) {
        user = item;
        _dialogDelete = true;
    }

    private void CloseDelete() {
        user = new User();
        _dialogDelete = false;
    }

    private async Task DeleteItemConfirm() {
        UpdateSnackbarState();
        var result = UserService.DeleteAsync(user.Id);
        if(result != null) {
            message = "删除成功！";
        }
        else {
            message = "删除失败";
        }
        snackbar = true;
        await GetData();
        CloseDelete();
    }
    private List<DataTableHeader<User>> _header = new List<DataTableHeader<User>>
    {
        new() {
            Text="ID",
            Sortable=true,
            Value=nameof(User.Id)
        },
        new() {
            Text="姓名",
            Value=nameof(User.Name)
        },
        new() {
          Text="地址",
          Value=nameof(User.Address)
        },
        new() {
          Text="电话号码",
          Value=nameof(User.Phone)
        },
        new() {
            Text="创建日期",
            Value=nameof(User.CreateTime)
        },
        new (){ Text= "操作", Value= "actions",Sortable=false }
    };

    private void UpdateSnackbarState()
    {
        if(snackbar == true)
        {
            snackbar = false;
        }
    }
}
