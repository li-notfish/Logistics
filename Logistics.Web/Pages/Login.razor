@page "/login"
@using Microsoft.AspNetCore.WebUtilities;
@inject ILocalStorageService LocalStorage;
@inject NavigationManager Navigation;
@inject IAuthService AuthService;
@inject AuthenticationStateProvider AuthStateProvider;
@attribute [AllowAnonymous]

<PageTitle>登录</PageTitle>
<h3>登录</h3>

<EditForm Model="login" OnValidSubmit="HandleLogin">
    <DataAnnotationsValidator />
    <div class="mb-3">
        <label for="Name">名字</label>
        <input id="Name" @bind-value="login.Name" class="form-control"/>
    </div>
    <div class="mb-3">
        <label for="Password">密码</label>
        <input id="Password" type="password" @bind-value="login.Password" class="form-control"/>
    </div>
    <button type="submit" class="btn btn-primary">登录</button>
    <ValidationSummary />
</EditForm>
<div class="text-danger">
    <span>@errorMessage</span>
</div>

@code {
    private LoginRequest login = new LoginRequest();
    private string errorMessage = string.Empty;
    private string returnUrl = string.Empty;

    protected override void OnInitialized()
    {
        var uri = Navigation.ToAbsoluteUri(Navigation.Uri);
        if (QueryHelpers.ParseQuery(uri.Query).TryGetValue("returnUrl", out var url))
        {
            returnUrl = url;
        }
    }

    private async Task HandleLogin() {
        login.LoginType = LoginType.Admin;
        var result = await AuthService.Login(login);
        if(result.Success)
        {
            errorMessage = string.Empty;
            await LocalStorage.SetItemAsync("authToken",result.Data);
            await LocalStorage.SetItemAsync("username",login.Name.ToString());
            await AuthStateProvider.GetAuthenticationStateAsync();
            Navigation.NavigateTo(returnUrl);
        }
        else
        {
            errorMessage = result.Message;
        }
    }
}
