@page "/login"
@using Microsoft.AspNetCore.WebUtilities;
@inject ILocalStorageService LocalStorage;
@inject NavigationManager Navigation;
@inject IAuthService AuthService;
@inject AuthenticationStateProvider AuthStateProvider;
@attribute [AllowAnonymous]

<PageTitle>登录</PageTitle>
 <MCard Width=510 Height=620 MaxHeight="620" Style="margin-left:25%">
    <div class="tab-header login-tab" style="padding-top:25px">
        <MForm Model="login" @ref="_loginForm" EnableValidation class="mt-12 mx-12 text-center">
            <DataAnnotationsValidator />
            <MTextField @bind-Value="@login.Name" Label="用户名" Placeholder="请输入用户名" Outlined Autofocus>
                <PrependContent>
                    <MIcon>mdi-account</MIcon>
                </PrependContent>
            </MTextField>
            <MTextField @bind-Value="@login.Password" Class="mt-3" Label="密码" Type="Password">
                <PrependContent>
                    <MIcon>mdi-lock</MIcon>
                </PrependContent>
            </MTextField>
            <MButton Class="rounded-pill text-btn white--text" Height=48 Width=340 Color="primary"  OnClick="HandleLogin">登录</MButton>
            <ValidationSummary />
        </MForm>
        <div class="text-danger">
            <span>@errorMessage</span>
        </div>
    </div>
</MCard>

@code {
    private LoginRequest login = new LoginRequest();
    private string errorMessage = string.Empty;
    private string returnUrl = string.Empty;
    MForm _loginForm = null!;

    protected override void OnInitialized()
    {
        var uri = Navigation.ToAbsoluteUri(Navigation.Uri);
        if (QueryHelpers.ParseQuery(uri.Query).TryGetValue("returnUrl", out var url))
        {
            returnUrl = url;
        }
    }

    private async Task HandleLogin() {
        login.LoginType = LoginType.Admin;
        if(_loginForm.Validate())
        {
            var result = await AuthService.Login(login);
            if(result.Success)
            {
                errorMessage = string.Empty;
                await LocalStorage.SetItemAsync("authToken",result.Data);
                await LocalStorage.SetItemAsync("username",login.Name.ToString());
                await AuthStateProvider.GetAuthenticationStateAsync();
                Navigation.NavigateTo(returnUrl);
            }
            else
            {
                errorMessage = result.Message;
            }
        }
        
    }
}
