@page "/order/"
@inject NavigationManager NavigationManager;
@inject IOrderService orderService;
<h3>订单列表</h3>
<div>
    <a href="/order/create" class="btn btn-primary">
    <i class="oi oi-plus"></i>添加订单
    </a>
    <Button Icon="fa-solid fa-arrows-rotate" Text="刷新一下" OnClick="ReGetData" class="my-2"/>
    <Table AutoGenerateColumns="true" TItem="Order" Items=@Orders ShowExtendButtons="true" ShowExtendDeleteButton="false" ShowExtendEditButton="false">
        <TableColumns>
            <TableColumn @bind-Field="@context.DeliveryId" Visible="false"/>
            <TableColumn @bind-Field="@context.Delivery" Visible="false"/>
        </TableColumns>
        <RowButtonTemplate>
            <TableCellButton Color="Color.Light" Icon="fa-solid fa-pen" Text="派单" OnClick="@(() => ShowDialog(context.OrderId))" />
            <TableCellButton Color="Color.Info" Icon="fa-solid fa-pen" Text="编辑" OnClick="@(() => OnHandelToUpdate(context.OrderId))"/>
        </RowButtonTemplate>
    </Table>
    @if(Orders== null|| Orders.Count == 0) {
    <div>
        <Empty Image="https://gw.alipayobjects.com/zos/antfincdn/ZHrcdLPrvN/empty.svg" Width="133" Text="暂时没有订单" />
    </div>
    }
</div>

@code {
    private List<Order> Orders { get; set; }

    [Inject]
    private DialogService? DialogService { get; set; }

    private async Task ShowDialog(string id) {
        var item = Orders.FirstOrDefault(x => x.OrderId.Equals(id));
        var option = new EditDialogOption<Order>()
            {
                Title = "安排派送",
                Model = item,
                ItemsPerRow = 2,
                RowType = RowType.Inline,
                OnCloseAsync = () => {
                    return Task.FromResult(true);
                },
                OnEditAsync = async context => {
                   var result = await orderService.UpdateAsync(item);
                    return true;
                },
    };
        await DialogService.ShowEditDialog(option);
    }

    protected override async Task OnInitializedAsync() {
        var result = await orderService.GetAllAsync();
        if(result != null) {
            Orders = result;
        }
    }

    protected override async Task OnAfterRenderAsync(bool firstRender) {
        if(!firstRender) {
            await ReGetData();
        }
    }

    private async Task ReGetData() {
        var result = await orderService.GetAllAsync();
        if(result == null) {
            Orders = result;
        }
    }
    private void OnHandelToUpdate(string id) {
        NavigationManager.NavigateTo($"order/{id}");
    }
}
