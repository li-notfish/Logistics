@page "/admin/{id:int}"
@using System.Diagnostics.CodeAnalysis;
@inject IAdminService adminService
@inject NavigationManager NavigationManager;


<h3>管理员详情</h3>

@if(admin == null) {
    <span>正在加载管理员</span>
}
else {
    <EditForm Model="admin">
        <input type="hidden" @bind-value="admin.Id"/>
        <div class="mb-3">
        <label for="Name">名字</label>
        <input id="Name" @bind-value="admin.Name" class="form-control"/>
    </div>
    <div class="mb-3">
        <label for="Password">密码</label>
        <input id="Password" type="password" @bind-value="admin.Password" class="form-control"/>
    </div>
    <div class="mb-3">
        <label for="confirmPassword">确认密码</label>
        <input id="confirmPassword" type="password" @bind-value="admin.Password" class="form-control"/>
    </div>
    <button type="submit" class="btn btn-primary" @onclick="HodelUpdateAdmin">修改</button>
    <Button @onclick="HoldDeleteAdmin">删除</Button>
    </EditForm>
}


@code {
    private Administrators admin = null;

    [Parameter]
    public int Id { get; set; }

    [Inject]
    [NotNull]
    private ToastService? ToastService{ get; set; }

    protected override async Task OnParametersSetAsync() {
        admin = await adminService.GetFirstOfDefaultAsync(Id);
    }

    private async Task HodelUpdateAdmin() {
        var result = await adminService.UpdateAsync(admin);
        if(result != null) {
            await ToastService.Success("修改成功",$"Id:{admin.Id}的信息已经被修改！",true);
        }
        else {
            await ToastService.Error("修改失败",$"Id:{admin.Id}的信息修改失败！",true);
        }
        NavigationManager.NavigateTo("admin/");
    }

    private async Task HoldDeleteAdmin() {
        var result = await adminService.DeleteAsync(admin.Id);
        if(result != null) {
            await ToastService.Success("删除成功",$"Id:{admin.Id}已被删除！",true);
        }
        else {
            await ToastService.Error("删除失败",$"Id:{admin.Id}删除失败！",true);
        }
        NavigationManager.NavigateTo("admin/");
    }
}
